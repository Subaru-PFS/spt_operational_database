"""update to 0.0.6

Revision ID: 67030552fe73
Revises: 
Create Date: 2021-04-23 13:59:55.954581

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '67030552fe73'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('cobra_motor_calib',
                    sa.Column('cobra_motor_calib_id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('calibrated_at', sa.DateTime(), nullable=True, comment='Date at which the model calibration took place [YYYY-MM-DDhh:mm:ss]'),
                    sa.Column('comments', sa.String(), nullable=True, comment='Comments'),
                    sa.PrimaryKeyConstraint('cobra_motor_calib_id')
                    )
    op.create_table('cobra_motor_direction',
                    sa.Column('cobra_motor_direction_id', sa.Integer(), autoincrement=False, nullable=False, comment='Motor movement direction [0,1]'),
                    sa.Column('cobra_motor_direction_name', sa.String(), nullable=True, comment='Corresponding name for the movement [Forward, Reverse]'),
                    sa.PrimaryKeyConstraint('cobra_motor_direction_id')
                    )
    op.create_table('fiducial_fiber',
                    sa.Column('fiducial_fiber_id', sa.Integer(), autoincrement=False, nullable=False),
                    sa.Column('field_on_pfi', sa.Integer(), nullable=True),
                    sa.Column('ff_in_field', sa.Integer(), nullable=True),
                    sa.Column('ff_type', sa.String(length=5), nullable=True),
                    sa.Column('ff_id_in_type', sa.Integer(), nullable=True),
                    sa.Column('version', sa.String(), nullable=True),
                    sa.PrimaryKeyConstraint('fiducial_fiber_id')
                    )
    op.create_table('obslog_user',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('account_name', sa.String(), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('account_name')
                    )
    op.create_table('sps_module',
                    sa.Column('sps_module_id', sa.Integer(), autoincrement=False, nullable=False, comment='SpS module identifier [1-4]'),
                    sa.Column('description', sa.String(), nullable=True, comment='SpS module name'),
                    sa.PrimaryKeyConstraint('sps_module_id'),
                    sa.UniqueConstraint('sps_module_id')
                    )
    op.create_table('sps_sequence',
                    sa.Column('visit_set_id', sa.Integer(), autoincrement=False, nullable=False, comment='SpS visit set identifier'),
                    sa.Column('sequence_type', sa.String(), nullable=True, comment='SpS sequence type'),
                    sa.Column('name', sa.String(), nullable=True, comment='The unique name assigned to this set of visits'),
                    sa.Column('comments', sa.String(), nullable=True, comment='Comments for the sequence'),
                    sa.Column('cmd_str', sa.String(), nullable=True, comment='ICS command string that generates exposures for this set of visits'),
                    sa.Column('status', sa.String(), nullable=True, comment='Status of the sequence'),
                    sa.PrimaryKeyConstraint('visit_set_id'),
                    sa.UniqueConstraint('visit_set_id')
                    )
    op.create_table('cobra_target',
                    sa.Column('pfs_visit_id', sa.Integer(), autoincrement=False, nullable=False, comment='PFS visit identifier'),
                    sa.Column('iteration', sa.Integer(), autoincrement=False, nullable=False, comment='Iteration number for this frame'),
                    sa.Column('cobra_id', sa.Integer(), autoincrement=False, nullable=False, comment='Fiber identifier'),
                    sa.Column('pfs_config_id', sa.BigInteger(), nullable=True),
                    sa.Column('pfi_nominal_x_mm', sa.REAL(), nullable=True, comment='Nominal x-position on the PFI as determined from the  pfs_design_fiber table [mm]'),
                    sa.Column('pfi_nominal_y_mm', sa.REAL(), nullable=True, comment='Nominal y-position on the PFI as determined from the  pfs_design_fiber table [mm]'),
                    sa.Column('pfi_target_x_mm', sa.REAL(), nullable=True, comment='Target x-position on the PFI for each iteration'),
                    sa.Column('pfi_target_y_mm', sa.REAL(), nullable=True, comment='Target y-position on the PFI for each iteration'),
                    sa.Column('cobra_motor_model_id_theta', sa.Integer(), nullable=True),
                    sa.Column('motor_target_theta', sa.REAL(), nullable=True, comment='the target angle of the theta motor'),
                    sa.Column('motor_num_step_theta', sa.Integer(), nullable=True, comment='the number of steps the theta motor has undertaken'),
                    sa.Column('motor_on_time_theta', sa.REAL(), nullable=True, comment='the theta motor ontime value'),
                    sa.Column('cobra_motor_model_id_phi', sa.Integer(), nullable=True),
                    sa.Column('motor_target_phi', sa.REAL(), nullable=True, comment='the target angle of the phi motor'),
                    sa.Column('motor_num_step_phi', sa.Integer(), nullable=True, comment='the number of steps the phi motor has undertaken'),
                    sa.Column('motor_on_time_phi', sa.REAL(), nullable=True, comment='the phi motor ontime value'),
                    sa.Column('flags', sa.Integer(), nullable=True, comment='flags for movement etc.'),
                    sa.ForeignKeyConstraint(['pfs_visit_id'], ['pfs_visit.pfs_visit_id'], ),
                    sa.PrimaryKeyConstraint('pfs_visit_id', 'iteration', 'cobra_id'),
                    sa.UniqueConstraint('pfs_visit_id', 'iteration', 'cobra_id')
                    )
    op.create_table('fiducial_fiber_geometry',
                    sa.Column('fiducial_fiber_id', sa.Integer(), autoincrement=False, nullable=False),
                    sa.Column('ff_center_on_pfi_x_mm', sa.REAL(), nullable=True),
                    sa.Column('ff_center_on_pfi_y_mm', sa.REAL(), nullable=True),
                    sa.ForeignKeyConstraint(['fiducial_fiber_id'], ['fiducial_fiber.fiducial_fiber_id'], ),
                    sa.PrimaryKeyConstraint('fiducial_fiber_id')
                    )
    op.create_table('obslog_visit_note',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('user_id', sa.Integer(), nullable=True),
                    sa.Column('pfs_visit_id', sa.Integer(), nullable=True),
                    sa.Column('body', sa.String(), nullable=False),
                    sa.ForeignKeyConstraint(['pfs_visit_id'], ['pfs_visit.pfs_visit_id'], ),
                    sa.ForeignKeyConstraint(['user_id'], ['obslog_user.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('obslog_visit_set_note',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('user_id', sa.Integer(), nullable=True),
                    sa.Column('visit_set_id', sa.Integer(), nullable=True),
                    sa.Column('body', sa.String(), nullable=False),
                    sa.ForeignKeyConstraint(['user_id'], ['obslog_user.id'], ),
                    sa.ForeignKeyConstraint(['visit_set_id'], ['sps_sequence.visit_set_id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('cobra',
                    sa.Column('cobra_id', sa.Integer(), autoincrement=False, nullable=False),
                    sa.Column('field_on_pfi', sa.Integer(), nullable=True),
                    sa.Column('cobra_in_field', sa.Integer(), nullable=True),
                    sa.Column('module_in_field', sa.Integer(), nullable=True),
                    sa.Column('cobra_in_module', sa.Integer(), nullable=True),
                    sa.Column('module_name', sa.String(length=3), nullable=True),
                    sa.Column('sps_camera_id', sa.Integer(), nullable=True),
                    sa.Column('slit_hole_sps', sa.Integer(), nullable=True),
                    sa.Column('cobra_id_sps', sa.Integer(), nullable=True),
                    sa.Column('cobra_id_lna', sa.String(length=12), nullable=True),
                    sa.Column('version', sa.String(), nullable=True),
                    sa.ForeignKeyConstraint(['sps_camera_id'], ['sps_camera.sps_camera_id'], ),
                    sa.PrimaryKeyConstraint('cobra_id'),
                    sa.UniqueConstraint('cobra_id')
                    )
    op.create_table('cobra_convergence_test',
                    sa.Column('cobra_motor_model_id', sa.Integer(), autoincrement=False, nullable=False),
                    sa.Column('iteration', sa.Integer(), autoincrement=False, nullable=False, comment='The iteration number'),
                    sa.Column('cobra_motor_angle_target_id', sa.Integer(), autoincrement=False, nullable=False, comment='The ID for the target angle of the motor to test'),
                    sa.Column('cobra_motor_angle_target', sa.REAL(), nullable=True, comment='The target angle of the motor to test'),
                    sa.Column('cobra_motor_angle_difference', sa.REAL(), nullable=True, comment='The difference of the motor angle [deg.]'),
                    sa.Column('signal_to_noise_ratio', sa.REAL(), nullable=True, comment='Signal-to-Noise ratio'),
                    sa.ForeignKeyConstraint(['cobra_motor_model_id'], ['cobra_motor_model.cobra_motor_model_id'], ),
                    sa.PrimaryKeyConstraint('cobra_motor_model_id', 'iteration', 'cobra_motor_angle_target_id'),
                    sa.UniqueConstraint('cobra_motor_model_id', 'iteration', 'cobra_motor_angle_target_id')
                    )
    op.create_table('cobra_motor_map',
                    sa.Column('cobra_motor_model_id', sa.Integer(), autoincrement=False, nullable=False),
                    sa.Column('cobra_motor_move_sequence', sa.Integer(), autoincrement=False, nullable=False, comment='The motor movement sequence'),
                    sa.Column('cobra_motor_angle', sa.REAL(), nullable=True, comment='The angle of the motor [deg]'),
                    sa.Column('cobra_motor_speed', sa.REAL(), nullable=True, comment='The speed of the motor [deg/step] (TBC)'),
                    sa.ForeignKeyConstraint(['cobra_motor_model_id'], ['cobra_motor_model.cobra_motor_model_id'], ),
                    sa.PrimaryKeyConstraint('cobra_motor_model_id', 'cobra_motor_move_sequence'),
                    sa.UniqueConstraint('cobra_motor_model_id', 'cobra_motor_move_sequence')
                    )
    op.create_table('mcs_pfi_transformation',
                    sa.Column('mcs_frame_id', sa.Integer(), autoincrement=False, nullable=False, comment='MCS frame identifier as generated from Gen2'),
                    sa.Column('x_trans', sa.REAL(), nullable=True, comment='Affine transformation x shift'),
                    sa.Column('y_trans', sa.REAL(), nullable=True, comment='Affine transformation y shift'),
                    sa.Column('x_scale', sa.REAL(), nullable=True, comment='Affine transformation x scale'),
                    sa.Column('y_scale', sa.REAL(), nullable=True, comment='Affine transformation y scale'),
                    sa.Column('angle', sa.REAL(), nullable=True, comment='Affine transformation rotation angle'),
                    sa.ForeignKeyConstraint(['mcs_frame_id'], ['mcs_exposure.mcs_frame_id'], ),
                    sa.PrimaryKeyConstraint('mcs_frame_id'),
                    sa.UniqueConstraint('mcs_frame_id')
                    )
    op.create_table('obslog_mcs_exposure_note',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('user_id', sa.Integer(), nullable=True),
                    sa.Column('mcs_exposure_frame_id', sa.Integer(), nullable=True),
                    sa.Column('body', sa.String(), nullable=False),
                    sa.ForeignKeyConstraint(['mcs_exposure_frame_id'], ['mcs_exposure.mcs_frame_id'], ),
                    sa.ForeignKeyConstraint(['user_id'], ['obslog_user.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('cobra_match',
                    sa.Column('mcs_frame_id', sa.Integer(), autoincrement=False, nullable=False, comment='MCS frame identifier as generated from Gen2'),
                    sa.Column('spot_id', sa.Integer(), autoincrement=False, nullable=False, comment='Corresponding MCS image spot identifier '),
                    sa.Column('pfs_visit_id', sa.Integer(), autoincrement=False, nullable=True, comment='PFS visit identifier'),
                    sa.Column('iteration', sa.Integer(), autoincrement=False, nullable=True, comment='Iteration number for this frame'),
                    sa.Column('cobra_id', sa.Integer(), autoincrement=False, nullable=True, comment='Fiber identifier'),
                    sa.Column('pfi_center_x_mm', sa.REAL(), nullable=True, comment='Actual x-position on the PFI [mm]'),
                    sa.Column('pfi_center_y_mm', sa.REAL(), nullable=True, comment='Actual y-position on the PFI [mm]'),
                    sa.Column('flags', sa.Integer(), nullable=True, comment='flags for movement etc.'),
                    sa.ForeignKeyConstraint(['mcs_frame_id', 'spot_id'], ['mcs_data.mcs_frame_id', 'mcs_data.spot_id'], ),
                    sa.ForeignKeyConstraint(['pfs_visit_id', 'iteration', 'cobra_id'], ['cobra_target.pfs_visit_id', 'cobra_target.iteration', 'cobra_target.cobra_id'], ),
                    sa.PrimaryKeyConstraint('mcs_frame_id', 'spot_id'),
                    sa.UniqueConstraint('mcs_frame_id'),
                    sa.UniqueConstraint('mcs_frame_id', 'spot_id')
                    )
    op.drop_constraint('obs_fiber_fiber_id_fkey', 'obs_fiber', type_='foreignkey')
    op.drop_constraint('pfs_arm_obj_fiber_id_fkey', 'pfs_arm_obj', type_='foreignkey')
    op.drop_constraint('pfs_config_fiber_fiber_id_fkey', 'pfs_config_fiber', type_='foreignkey')
    op.drop_constraint('pfs_design_fiber_fiber_id_fkey', 'pfs_design_fiber', type_='foreignkey')

    op.drop_constraint('cobra_geometry_spectrograph_id_fkey', 'cobra_geometry', type_='foreignkey')
    op.drop_constraint('sps_exposure_spectrograph_id_fkey', 'sps_exposure', type_='foreignkey')
    op.drop_constraint('sky_model_spectrograph_id_fkey', 'sky_model', type_='foreignkey')
    op.drop_constraint('psf_model_spectrograph_id_fkey', 'psf_model', type_='foreignkey')
    op.drop_table('spectrograph')
    op.drop_index('ix_cobra_status_mcs_frame_id', table_name='cobra_status')
    op.drop_table('cobra_status')
    op.drop_table('fiducial_fiber_position')
    op.drop_index('ix_cobra_movement_mcs_frame_id', table_name='cobra_movement')
    op.drop_table('cobra_movement')
    op.create_unique_constraint(None, 'beam_switch_mode', ['beam_switch_mode_id'])
    op.create_unique_constraint(None, 'calib', ['calib_id'])
    op.create_unique_constraint(None, 'calib_set', ['calib_set_id'])
    op.create_unique_constraint(None, 'cloud_condition', ['cloud_condition_id'])
    op.add_column('cobra_geometry', sa.Column('cobra_id', sa.Integer(), autoincrement=False, nullable=False))
    op.add_column('cobra_geometry', sa.Column('cobra_motor_calib_id', sa.Integer(), autoincrement=False, nullable=False))
    op.add_column('cobra_geometry', sa.Column('cobra_motor_phi_length', sa.REAL(), nullable=True))
    op.add_column('cobra_geometry', sa.Column('cobra_motor_phi_limit_in', sa.REAL(), nullable=True))
    op.add_column('cobra_geometry', sa.Column('cobra_motor_phi_limit_out', sa.REAL(), nullable=True))
    op.add_column('cobra_geometry', sa.Column('cobra_motor_theta_length', sa.REAL(), nullable=True))
    op.add_column('cobra_geometry', sa.Column('cobra_motor_theta_limit0', sa.REAL(), nullable=True))
    op.add_column('cobra_geometry', sa.Column('cobra_motor_theta_limit1', sa.REAL(), nullable=True))
    op.add_column('cobra_geometry', sa.Column('cobra_status', sa.String(), nullable=True, comment='OK/INVISIBLE/LOCKED_THETA/LOCKED_PHI/BAD_THETA/BAD_PHI'))
    op.create_unique_constraint(None, 'cobra_geometry', ['cobra_motor_calib_id', 'cobra_id'])
    op.create_foreign_key(None, 'cobra_geometry', 'cobra', ['cobra_id'], ['cobra_id'])
    op.create_foreign_key(None, 'cobra_geometry', 'cobra_motor_calib', ['cobra_motor_calib_id'], ['cobra_motor_calib_id'])
    op.drop_column('cobra_geometry', 'module_name')
    op.drop_column('cobra_geometry', 'cobra_in_field')
    op.drop_column('cobra_geometry', 'fiber_id_lna')
    op.drop_column('cobra_geometry', 'spectrograph_id')
    op.drop_column('cobra_geometry', 'version')
    op.drop_column('cobra_geometry', 'slit_hole_sps')
    op.drop_column('cobra_geometry', 'module_in_field')
    op.drop_column('cobra_geometry', 'cobra_in_module')
    op.drop_column('cobra_geometry', 'fiber_id')
    op.drop_column('cobra_geometry', 'field_on_pfi')
    op.drop_column('cobra_geometry', 'fiber_id_sps')
    op.add_column('cobra_motor_model', sa.Column('cobra_id', sa.Integer(), nullable=True, comment='The cobra fiber identifier'))
    op.add_column('cobra_motor_model', sa.Column('cobra_motor_calib_id', sa.Integer(), nullable=True))
    op.add_column('cobra_motor_model', sa.Column('cobra_motor_direction_id', sa.Integer(), nullable=True))
    op.add_column('cobra_motor_model', sa.Column('cobra_motor_frequency', sa.REAL(), nullable=True, comment='The motor frequency'))
    op.add_column('cobra_motor_model', sa.Column('cobra_motor_step_size', sa.REAL(), nullable=True, comment='The step size resolution'))
    op.create_index(op.f('ix_cobra_motor_model_cobra_id'), 'cobra_motor_model', ['cobra_id'], unique=False)
    op.create_index(op.f('ix_cobra_motor_model_cobra_motor_axis_id'), 'cobra_motor_model', ['cobra_motor_axis_id'], unique=False)
    op.create_index(op.f('ix_cobra_motor_model_cobra_motor_calib_id'), 'cobra_motor_model', ['cobra_motor_calib_id'], unique=False)
    op.create_index(op.f('ix_cobra_motor_model_cobra_motor_direction_id'), 'cobra_motor_model', ['cobra_motor_direction_id'], unique=False)
    op.create_foreign_key(None, 'cobra_motor_model', 'cobra_motor_direction', ['cobra_motor_direction_id'], ['cobra_motor_direction_id'])
    op.create_foreign_key(None, 'cobra_motor_model', 'cobra_motor_calib', ['cobra_motor_calib_id'], ['cobra_motor_calib_id'])
    op.drop_column('cobra_motor_model', 'cobra_motor_speed')
    op.drop_column('cobra_motor_model', 'calibrated_at')
    op.drop_column('cobra_motor_model', 'fiber_id')
    op.drop_column('cobra_motor_model', 'cobra_motor_angle')
    op.create_unique_constraint(None, 'drp1d', ['pfs_object_id', 'processed_at'])
    op.create_unique_constraint(None, 'drp1d_redshift', ['pfs_object_id', 'processed_at'])
    op.create_unique_constraint(None, 'drp_ga', ['pfs_object_id', 'processed_at'])
    op.create_unique_constraint(None, 'flux_calib', ['flux_calib_id'])
    op.create_unique_constraint(None, 'guide_stars', ['guide_star_id'])
    op.create_unique_constraint(None, 'input_catalog', ['cat_id'])
    op.create_unique_constraint(None, 'line_list', ['line_id'])
    op.create_unique_constraint(None, 'mcs_boresight', ['pfs_visit_id'])
    op.create_unique_constraint(None, 'mcs_data', ['mcs_frame_id', 'spot_id'])
    op.create_unique_constraint(None, 'obj_type', ['obj_type_id'])
    op.add_column('obs_fiber', sa.Column('cobra_id', sa.Integer(), autoincrement=False, nullable=False))
    op.drop_constraint('obs_fiber_pfs_visit_id_key', 'obs_fiber', type_='unique')
    op.create_unique_constraint(None, 'obs_fiber', ['pfs_visit_id', 'cobra_id'])
    op.create_foreign_key(None, 'obs_fiber', 'cobra', ['cobra_id'], ['cobra_id'])
    op.drop_column('obs_fiber', 'fiber_id')
    op.create_unique_constraint(None, 'pfs_arm', ['pfs_visit_id'])
    op.add_column('pfs_arm_obj', sa.Column('cobra_id', sa.Integer(), autoincrement=False, nullable=False))
    op.create_unique_constraint(None, 'pfs_arm_obj', ['pfs_visit_id', 'cobra_id'])
    op.create_foreign_key(None, 'pfs_arm_obj', 'cobra', ['cobra_id'], ['cobra_id'])
    op.drop_column('pfs_arm_obj', 'fiber_id')
    op.create_unique_constraint(None, 'pfs_config', ['pfs_config_id'])
    op.add_column('pfs_config_fiber', sa.Column('cobra_id', sa.Integer(), autoincrement=False, nullable=False))
    op.create_unique_constraint(None, 'pfs_config_fiber', ['pfs_config_id', 'cobra_id'])
    op.create_foreign_key(None, 'pfs_config_fiber', 'cobra', ['cobra_id'], ['cobra_id'])
    op.drop_column('pfs_config_fiber', 'fiber_id')
    op.create_unique_constraint(None, 'pfs_design', ['pfs_design_id'])
    op.add_column('pfs_design_fiber', sa.Column('cobra_id', sa.Integer(), autoincrement=False, nullable=False))
    op.add_column('pfs_design_fiber', sa.Column('pfi_nominal_x_mm', sa.REAL(), nullable=True, comment='Nominal x-position on the PFI [mm]'))
    op.add_column('pfs_design_fiber', sa.Column('pfi_nominal_y_mm', sa.REAL(), nullable=True, comment='Nominal y-position on the PFI [mm]'))
    op.create_unique_constraint(None, 'pfs_design_fiber', ['pfs_design_id', 'cobra_id'])
    op.create_foreign_key(None, 'pfs_design_fiber', 'cobra', ['cobra_id'], ['cobra_id'])
    op.drop_column('pfs_design_fiber', 'pfi_target_x_mm')
    op.drop_column('pfs_design_fiber', 'pfi_target_y_mm')
    op.drop_column('pfs_design_fiber', 'fiber_id')
    op.create_unique_constraint(None, 'pfs_object', ['pfs_object_id'])
    op.add_column('pfs_visit', sa.Column('issued_at', sa.DateTime(), nullable=True, comment='Issued time [YYYY-MM-DDThh:mm:ss]'))
    op.add_column('pfs_visit', sa.Column('pfs_design_id', sa.BigInteger(), nullable=True))
    op.create_unique_constraint(None, 'pfs_visit', ['pfs_visit_id'])
    op.add_column('processing_status', sa.Column('are_data_ok', sa.Boolean(), nullable=True, comment='The result of the quality assessment'))
    op.add_column('processing_status', sa.Column('comments', sa.String(), nullable=True, comment='Detailed comments on the QA results'))
    op.add_column('processing_status', sa.Column('drp2d_version', sa.String(), nullable=True, comment='2D-DRP version used in the processing'))
    op.add_column('processing_status', sa.Column('qa_version', sa.String(), nullable=True, comment='QA version used in the processing (TBD)'))
    op.drop_constraint('processing_status_visit_set_id_fkey', 'processing_status', type_='foreignkey')
    op.create_foreign_key(None, 'processing_status', 'sps_sequence', ['visit_set_id'], ['visit_set_id'])
    op.drop_column('processing_status', 'data_ok')
    op.create_unique_constraint(None, 'program', ['program_id'])
    op.create_unique_constraint(None, 'proposal', ['proposal_id'])
    op.add_column('psf_model', sa.Column('sps_camera_id', sa.Integer(), nullable=True))
    op.create_unique_constraint(None, 'psf_model', ['psf_model_id'])
    op.create_foreign_key(None, 'psf_model', 'sps_camera', ['sps_camera_id'], ['sps_camera_id'])
    op.drop_column('psf_model', 'spectrograph_id')
    op.create_unique_constraint(None, 'qa_type', ['qa_type_id'])
    op.add_column('sky_model', sa.Column('sps_camera_id', sa.Integer(), nullable=True))
    op.create_unique_constraint(None, 'sky_model', ['sky_model_id'])
    op.create_foreign_key(None, 'sky_model', 'sps_camera', ['sps_camera_id'], ['sps_camera_id'])
    op.drop_column('sky_model', 'spectrograph_id')
    op.add_column('sps_annotation', sa.Column('annotation_id', sa.Integer(), autoincrement=True, nullable=False, comment='SpS annotation identifier (primary key)'))
    op.add_column('sps_annotation', sa.Column('created_at', sa.DateTime(), nullable=True, comment='Creation time [YYYY-MM-DDThh:mm:ss]'))
    op.add_column('sps_annotation', sa.Column('data_flag', sa.Integer(), nullable=True, comment='Flag of obtained data'))
    op.add_column('sps_annotation', sa.Column('notes', sa.String(), nullable=True, comment='Notes of obtained data'))
    op.add_column('sps_annotation', sa.Column('sps_camera_id', sa.Integer(), nullable=True, comment='SpS camera identifier [1-16]'))
    op.alter_column('sps_annotation', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    comment='PFS visit identifier',
                    existing_nullable=True)
    op.drop_constraint('sps_annotation_visit_set_id_fkey', 'sps_annotation', type_='foreignkey')
    op.drop_constraint('sps_annotation_pfs_visit_id_fkey', 'sps_annotation', type_='foreignkey')
    op.drop_column('sps_annotation', 'anomaly')
    op.drop_column('sps_annotation', 'visit_set_id')
    op.drop_column('sps_annotation', 'sps_annotation_id')
    op.drop_column('sps_annotation', 'comment')
    op.add_column('sps_camera', sa.Column('arm', sa.String(length=1), nullable=True, comment='Spectrograph arm identifier [b, r, n, m]'))
    op.add_column('sps_camera', sa.Column('arm_num', sa.Integer(), nullable=True, comment='Spectrograph arm identifier as a number [1-4]'))
    op.add_column('sps_camera', sa.Column('sps_module_id', sa.Integer(), nullable=True, comment='SpS module identifier [1-4]'))
    op.alter_column('sps_camera', 'sps_camera_id',
                    existing_type=sa.INTEGER(),
                    comment='SpS camera identifier [1-16]',
                    autoincrement=False)
    op.drop_constraint('sps_camera_visit_set_id_fkey', 'sps_camera', type_='foreignkey')
    op.create_foreign_key(None, 'sps_camera', 'sps_module', ['sps_module_id'], ['sps_module_id'])
    op.drop_column('sps_camera', 'visit_set_id')
    op.drop_column('sps_camera', 'sps_arm_id')
    op.drop_column('sps_camera', 'sps_module')
    op.add_column('sps_condition', sa.Column('sps_camera_id', sa.Integer(), nullable=False, comment='SpS camera identifier [1-16]'))
    op.alter_column('sps_condition', 'background',
                    existing_type=sa.REAL(),
                    comment='Background level (TBD)',
                    existing_nullable=True)
    op.alter_column('sps_condition', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    comment='PFS visit identifier')
    op.alter_column('sps_condition', 'throughput',
                    existing_type=sa.REAL(),
                    comment='System throughput (TBD)',
                    existing_nullable=True)
    op.create_unique_constraint(None, 'sps_condition', ['pfs_visit_id', 'sps_camera_id'])
    op.drop_constraint('sps_condition_pfs_visit_id_fkey', 'sps_condition', type_='foreignkey')
    op.add_column('sps_exposure', sa.Column('beam_config_date', sa.FLOAT(), nullable=True, comment='MJD when the configuration changed'))
    op.add_column('sps_exposure', sa.Column('exptime', sa.REAL(), nullable=True, comment='Exposure time for visit [sec]'))
    op.add_column('sps_exposure', sa.Column('sps_camera_id', sa.Integer(), nullable=False, comment='SpS camera identifier [1-16]'))
    op.alter_column('sps_exposure', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    comment='PFS visit identifier')
    op.create_unique_constraint(None, 'sps_exposure', ['pfs_visit_id', 'sps_camera_id'])
    op.drop_constraint('sps_exposure_pfs_visit_id_fkey', 'sps_exposure', type_='foreignkey')
    op.create_foreign_key(None, 'sps_exposure', 'sps_visit', ['pfs_visit_id'], ['pfs_visit_id'])
    op.create_foreign_key(None, 'sps_exposure', 'sps_camera', ['sps_camera_id'], ['sps_camera_id'])
    op.create_foreign_key(None, 'sps_annotation', 'sps_exposure', ['pfs_visit_id', 'sps_camera_id'], ['pfs_visit_id', 'sps_camera_id'])
    op.drop_column('sps_exposure', 'insrot_end')
    op.drop_column('sps_exposure', 'mjd_exp_end')
    op.drop_column('sps_exposure', 'insrot_start')
    op.drop_column('sps_exposure', 'mjd_exp_start')
    op.drop_column('sps_exposure', 'is_medium_resolution')
    op.drop_column('sps_exposure', 'spectrograph_id')
    op.drop_column('sps_exposure', 'sps_exptime')
    op.add_column('sps_visit', sa.Column('exp_type', sa.String(), nullable=True, comment='Type of exposure: BIAS, FLAT, DFLAT etc.'))
    op.alter_column('sps_visit', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    comment='PFS visit identifier',
                    autoincrement=False)
    op.create_unique_constraint(None, 'sps_visit', ['pfs_visit_id'])
    op.drop_constraint('sps_visit_visit_set_id_fkey', 'sps_visit', type_='foreignkey')
    op.drop_column('sps_visit', 'visit_set_id')
    op.drop_column('sps_visit', 'visit_type')
    op.create_unique_constraint(None, 'star_type', ['star_type_id'])
    op.create_unique_constraint(None, 'target', ['target_id'])
    op.create_unique_constraint(None, 'target_type', ['target_type_id'])
    op.create_unique_constraint(None, 'tel_condition', ['tel_visit_id'])
    op.create_unique_constraint(None, 'tile', ['tile_id'])
    op.create_unique_constraint(None, 'visit_hash', ['pfs_visit_hash'])
    op.add_column('visit_set', sa.Column('pfs_visit_id', sa.Integer(), autoincrement=False, nullable=False))
    op.alter_column('visit_set', 'visit_set_id',
                    existing_type=sa.INTEGER(),
                    nullable=False,
                    comment=None,
                    existing_comment='visit set identifier')
    op.create_unique_constraint(None, 'visit_set', ['pfs_visit_id'])
    op.create_foreign_key(None, 'visit_set', 'sps_sequence', ['visit_set_id'], ['visit_set_id'])
    op.create_foreign_key(None, 'visit_set', 'sps_visit', ['pfs_visit_id'], ['pfs_visit_id'])
    op.drop_column('visit_set', 'cmd_str')
    op.drop_column('visit_set', 'name')
    op.add_column('visits_to_combine', sa.Column('pfs_visit_id', sa.Integer(), autoincrement=False, nullable=False))
    op.create_unique_constraint(None, 'visits_to_combine', ['pfs_visit_id', 'pfs_visit_hash'])
    op.drop_constraint('visits_to_combine_tel_visit_id_fkey', 'visits_to_combine', type_='foreignkey')
    op.create_foreign_key(None, 'visits_to_combine', 'pfs_visit', ['pfs_visit_id'], ['pfs_visit_id'])
    op.drop_column('visits_to_combine', 'tel_visit_id')
    op.create_foreign_key(None, 'sps_annotation', 'sps_exposure', ['pfs_visit_id', 'sps_camera_id'], ['pfs_visit_id', 'sps_camera_id'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('visits_to_combine', sa.Column('tel_visit_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'visits_to_combine', type_='foreignkey')
    op.create_foreign_key('visits_to_combine_tel_visit_id_fkey', 'visits_to_combine', 'tel_visit', ['tel_visit_id'], ['tel_visit_id'])
    op.drop_constraint(None, 'visits_to_combine', type_='unique')
    op.drop_column('visits_to_combine', 'pfs_visit_id')
    op.add_column('visit_set', sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True, comment='The unique name assigned to this set of visits'))
    op.add_column('visit_set', sa.Column('cmd_str', sa.VARCHAR(), autoincrement=False, nullable=True, comment='ICS command string that generates exposures for this set of visits'))
    op.drop_constraint(None, 'visit_set', type_='foreignkey')
    op.drop_constraint(None, 'visit_set', type_='foreignkey')
    op.drop_constraint(None, 'visit_set', type_='unique')
    op.alter_column('visit_set', 'visit_set_id',
                    existing_type=sa.INTEGER(),
                    nullable=False,
                    comment='visit set identifier')
    op.drop_column('visit_set', 'pfs_visit_id')
    op.drop_constraint(None, 'visit_hash', type_='unique')
    op.drop_constraint(None, 'tile', type_='unique')
    op.drop_constraint(None, 'tel_condition', type_='unique')
    op.drop_constraint(None, 'target_type', type_='unique')
    op.drop_constraint(None, 'target', type_='unique')
    op.drop_constraint(None, 'star_type', type_='unique')
    op.add_column('sps_visit', sa.Column('visit_type', sa.VARCHAR(), autoincrement=False, nullable=True, comment='Type of visit: BIAS, FLAT, DFLAT etc.'))
    op.add_column('sps_visit', sa.Column('visit_set_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('sps_visit_visit_set_id_fkey', 'sps_visit', 'visit_set', ['visit_set_id'], ['visit_set_id'])
    op.drop_constraint(None, 'sps_visit', type_='unique')
    op.alter_column('sps_visit', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    comment=None,
                    existing_comment='PFS visit identifier',
                    autoincrement=False)
    op.drop_column('sps_visit', 'exp_type')
    op.add_column('sps_exposure', sa.Column('sps_exptime', sa.REAL(), autoincrement=False, nullable=True, comment='Exposure time for visit [sec]'))
    op.add_column('sps_exposure', sa.Column('spectrograph_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('sps_exposure', sa.Column('is_medium_resolution', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Flag to indicate whether visit includes the medium resolution filter'))
    op.add_column('sps_exposure', sa.Column('mjd_exp_start', sa.REAL(), autoincrement=False, nullable=True, comment='Start time for exposure in MJD'))
    op.add_column('sps_exposure', sa.Column('insrot_start', sa.REAL(), autoincrement=False, nullable=True, comment='The start instrument rotation position [deg]'))
    op.add_column('sps_exposure', sa.Column('mjd_exp_end', sa.REAL(), autoincrement=False, nullable=True, comment='End time for exposure in MJD'))
    op.add_column('sps_exposure', sa.Column('insrot_end', sa.REAL(), autoincrement=False, nullable=True, comment='The end instrument rotation position [deg]'))
    op.drop_constraint(None, 'sps_exposure', type_='foreignkey')
    op.drop_constraint(None, 'sps_exposure', type_='foreignkey')
    op.create_foreign_key('sps_exposure_spectrograph_id_fkey', 'sps_exposure', 'spectrograph', ['spectrograph_id'], ['spectrograph_id'])
    op.create_foreign_key('sps_exposure_pfs_visit_id_fkey', 'sps_exposure', 'pfs_visit', ['pfs_visit_id'], ['pfs_visit_id'])
    op.drop_constraint(None, 'sps_exposure', type_='unique')
    op.alter_column('sps_exposure', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    comment=None,
                    existing_comment='PFS visit identifier')
    op.drop_column('sps_exposure', 'sps_camera_id')
    op.drop_column('sps_exposure', 'exptime')
    op.drop_column('sps_exposure', 'beam_config_date')
    op.drop_constraint(None, 'sps_condition', type_='foreignkey')
    op.create_foreign_key('sps_condition_pfs_visit_id_fkey', 'sps_condition', 'pfs_visit', ['pfs_visit_id'], ['pfs_visit_id'])
    op.drop_constraint(None, 'sps_condition', type_='unique')
    op.alter_column('sps_condition', 'throughput',
                    existing_type=sa.REAL(),
                    comment=None,
                    existing_comment='System throughput (TBD)',
                    existing_nullable=True)
    op.alter_column('sps_condition', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    comment=None,
                    existing_comment='PFS visit identifier')
    op.alter_column('sps_condition', 'background',
                    existing_type=sa.REAL(),
                    comment=None,
                    existing_comment='Background level (TBD)',
                    existing_nullable=True)
    op.drop_column('sps_condition', 'sps_camera_id')
    op.add_column('sps_camera', sa.Column('sps_module', sa.INTEGER(), autoincrement=False, nullable=True, comment='SPS module identifier [1-4]'))
    op.add_column('sps_camera', sa.Column('sps_arm_id', sa.VARCHAR(), autoincrement=False, nullable=True, comment='Spectrogram arm identifier [B, R, N, M]'))
    op.add_column('sps_camera', sa.Column('visit_set_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'sps_camera', type_='foreignkey')
    op.create_foreign_key('sps_camera_visit_set_id_fkey', 'sps_camera', 'visit_set', ['visit_set_id'], ['visit_set_id'])
    op.alter_column('sps_camera', 'sps_camera_id',
                    existing_type=sa.INTEGER(),
                    comment=None,
                    existing_comment='SpS camera identifier [1-16]',
                    autoincrement=False)
    op.drop_column('sps_camera', 'sps_module_id')
    op.drop_column('sps_camera', 'arm_num')
    op.drop_column('sps_camera', 'arm')
    op.add_column('sps_annotation', sa.Column('comment', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('sps_annotation', sa.Column('sps_annotation_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Unique identifier for this annotation'))
    op.add_column('sps_annotation', sa.Column('visit_set_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('sps_annotation', sa.Column('anomaly', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'sps_annotation', type_='foreignkey')
    op.create_foreign_key('sps_annotation_pfs_visit_id_fkey', 'sps_annotation', 'pfs_visit', ['pfs_visit_id'], ['pfs_visit_id'])
    op.create_foreign_key('sps_annotation_visit_set_id_fkey', 'sps_annotation', 'visit_set', ['visit_set_id'], ['visit_set_id'])
    op.alter_column('sps_annotation', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    comment=None,
                    existing_comment='PFS visit identifier',
                    existing_nullable=True)
    op.drop_column('sps_annotation', 'sps_camera_id')
    op.drop_column('sps_annotation', 'notes')
    op.drop_column('sps_annotation', 'data_flag')
    op.drop_column('sps_annotation', 'created_at')
    op.drop_column('sps_annotation', 'annotation_id')
    op.add_column('sky_model', sa.Column('spectrograph_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'sky_model', type_='foreignkey')
    op.create_foreign_key('sky_model_spectrograph_id_fkey', 'sky_model', 'spectrograph', ['spectrograph_id'], ['spectrograph_id'])
    op.drop_constraint(None, 'sky_model', type_='unique')
    op.drop_column('sky_model', 'sps_camera_id')
    op.drop_constraint(None, 'qa_type', type_='unique')
    op.add_column('psf_model', sa.Column('spectrograph_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'psf_model', type_='foreignkey')
    op.create_foreign_key('psf_model_spectrograph_id_fkey', 'psf_model', 'spectrograph', ['spectrograph_id'], ['spectrograph_id'])
    op.drop_constraint(None, 'psf_model', type_='unique')
    op.drop_column('psf_model', 'sps_camera_id')
    op.drop_constraint(None, 'proposal', type_='unique')
    op.drop_constraint(None, 'program', type_='unique')
    op.add_column('processing_status', sa.Column('data_ok', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'processing_status', type_='foreignkey')
    op.create_foreign_key('processing_status_visit_set_id_fkey', 'processing_status', 'visit_set', ['visit_set_id'], ['visit_set_id'])
    op.drop_column('processing_status', 'qa_version')
    op.drop_column('processing_status', 'drp2d_version')
    op.drop_column('processing_status', 'comments')
    op.drop_column('processing_status', 'are_data_ok')
    op.drop_constraint(None, 'pfs_visit', type_='unique')
    op.drop_column('pfs_visit', 'pfs_design_id')
    op.drop_column('pfs_visit', 'issued_at')
    op.drop_constraint(None, 'pfs_object', type_='unique')
    op.add_column('pfs_design_fiber', sa.Column('fiber_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('pfs_design_fiber', sa.Column('pfi_target_y_mm', sa.REAL(), autoincrement=False, nullable=True, comment='Target y-position on the PFI [mm]'))
    op.add_column('pfs_design_fiber', sa.Column('pfi_target_x_mm', sa.REAL(), autoincrement=False, nullable=True, comment='Target x-position on the PFI [mm]'))
    op.drop_constraint(None, 'pfs_design_fiber', type_='foreignkey')
    op.create_foreign_key('pfs_design_fiber_fiber_id_fkey', 'pfs_design_fiber', 'cobra_geometry', ['fiber_id'], ['fiber_id'])
    op.drop_constraint(None, 'pfs_design_fiber', type_='unique')
    op.drop_column('pfs_design_fiber', 'pfi_nominal_y_mm')
    op.drop_column('pfs_design_fiber', 'pfi_nominal_x_mm')
    op.drop_column('pfs_design_fiber', 'cobra_id')
    op.drop_constraint(None, 'pfs_design', type_='unique')
    op.add_column('pfs_config_fiber', sa.Column('fiber_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'pfs_config_fiber', type_='foreignkey')
    op.create_foreign_key('pfs_config_fiber_fiber_id_fkey', 'pfs_config_fiber', 'cobra_geometry', ['fiber_id'], ['fiber_id'])
    op.drop_constraint(None, 'pfs_config_fiber', type_='unique')
    op.drop_column('pfs_config_fiber', 'cobra_id')
    op.drop_constraint(None, 'pfs_config', type_='unique')
    op.add_column('pfs_arm_obj', sa.Column('fiber_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'pfs_arm_obj', type_='foreignkey')
    op.create_foreign_key('pfs_arm_obj_fiber_id_fkey', 'pfs_arm_obj', 'cobra_geometry', ['fiber_id'], ['fiber_id'])
    op.drop_constraint(None, 'pfs_arm_obj', type_='unique')
    op.drop_column('pfs_arm_obj', 'cobra_id')
    op.drop_constraint(None, 'pfs_arm', type_='unique')
    op.add_column('obs_fiber', sa.Column('fiber_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'obs_fiber', type_='foreignkey')
    op.create_foreign_key('obs_fiber_fiber_id_fkey', 'obs_fiber', 'cobra_geometry', ['fiber_id'], ['fiber_id'])
    op.drop_constraint(None, 'obs_fiber', type_='unique')
    op.create_unique_constraint('obs_fiber_pfs_visit_id_key', 'obs_fiber', ['pfs_visit_id'])
    op.drop_column('obs_fiber', 'cobra_id')
    op.drop_constraint(None, 'obj_type', type_='unique')
    op.drop_constraint(None, 'mcs_data', type_='unique')
    op.drop_constraint(None, 'mcs_boresight', type_='unique')
    op.drop_constraint(None, 'line_list', type_='unique')
    op.drop_constraint(None, 'input_catalog', type_='unique')
    op.drop_constraint(None, 'guide_stars', type_='unique')
    op.drop_constraint(None, 'flux_calib', type_='unique')
    op.drop_constraint(None, 'drp_ga', type_='unique')
    op.drop_constraint(None, 'drp1d_redshift', type_='unique')
    op.drop_constraint(None, 'drp1d', type_='unique')
    op.add_column('cobra_motor_model', sa.Column('cobra_motor_angle', sa.REAL(), autoincrement=False, nullable=True, comment='The angle of the motor [deg]'))
    op.add_column('cobra_motor_model', sa.Column('fiber_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='The cobra fiber identifier'))
    op.add_column('cobra_motor_model', sa.Column('calibrated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='Date at which the model calibration took place [YYYY-MM-DDhh:mm:ss]'))
    op.add_column('cobra_motor_model', sa.Column('cobra_motor_speed', sa.REAL(), autoincrement=False, nullable=True, comment='The speed of the motor [deg/s] (TBC)'))
    op.drop_constraint(None, 'cobra_motor_model', type_='foreignkey')
    op.drop_constraint(None, 'cobra_motor_model', type_='foreignkey')
    op.drop_index(op.f('ix_cobra_motor_model_cobra_motor_direction_id'), table_name='cobra_motor_model')
    op.drop_index(op.f('ix_cobra_motor_model_cobra_motor_calib_id'), table_name='cobra_motor_model')
    op.drop_index(op.f('ix_cobra_motor_model_cobra_motor_axis_id'), table_name='cobra_motor_model')
    op.drop_index(op.f('ix_cobra_motor_model_cobra_id'), table_name='cobra_motor_model')
    op.drop_column('cobra_motor_model', 'cobra_motor_step_size')
    op.drop_column('cobra_motor_model', 'cobra_motor_frequency')
    op.drop_column('cobra_motor_model', 'cobra_motor_direction_id')
    op.drop_column('cobra_motor_model', 'cobra_motor_calib_id')
    op.drop_column('cobra_motor_model', 'cobra_id')
    op.add_column('cobra_geometry', sa.Column('fiber_id_sps', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('cobra_geometry', sa.Column('field_on_pfi', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('cobra_geometry', sa.Column('fiber_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('cobra_geometry', sa.Column('cobra_in_module', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('cobra_geometry', sa.Column('module_in_field', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('cobra_geometry', sa.Column('slit_hole_sps', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('cobra_geometry', sa.Column('version', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('cobra_geometry', sa.Column('spectrograph_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('cobra_geometry', sa.Column('fiber_id_lna', sa.VARCHAR(length=12), autoincrement=False, nullable=True))
    op.add_column('cobra_geometry', sa.Column('cobra_in_field', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('cobra_geometry', sa.Column('module_name', sa.VARCHAR(length=3), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'cobra_geometry', type_='foreignkey')
    op.drop_constraint(None, 'cobra_geometry', type_='foreignkey')
    op.create_foreign_key('cobra_geometry_spectrograph_id_fkey', 'cobra_geometry', 'spectrograph', ['spectrograph_id'], ['spectrograph_id'])
    op.drop_constraint(None, 'cobra_geometry', type_='unique')
    op.drop_column('cobra_geometry', 'cobra_status')
    op.drop_column('cobra_geometry', 'cobra_motor_theta_limit1')
    op.drop_column('cobra_geometry', 'cobra_motor_theta_limit0')
    op.drop_column('cobra_geometry', 'cobra_motor_theta_length')
    op.drop_column('cobra_geometry', 'cobra_motor_phi_limit_out')
    op.drop_column('cobra_geometry', 'cobra_motor_phi_limit_in')
    op.drop_column('cobra_geometry', 'cobra_motor_phi_length')
    op.drop_column('cobra_geometry', 'cobra_motor_calib_id')
    op.drop_column('cobra_geometry', 'cobra_id')
    op.drop_constraint(None, 'cloud_condition', type_='unique')
    op.drop_constraint(None, 'calib_set', type_='unique')
    op.drop_constraint(None, 'calib', type_='unique')
    op.drop_constraint(None, 'beam_switch_mode', type_='unique')
    op.create_table('cobra_movement',
                    sa.Column('mcs_frame_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='MCS frame identifier. Provided by Gen2'),
                    sa.Column('fiber_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Fiber identifier'),
                    sa.Column('cobra_motor_model_id_theta', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('motor_num_step_theta', sa.INTEGER(), autoincrement=False, nullable=True, comment='the number of steps the theta motor has undertaken'),
                    sa.Column('motor_on_time_theta', sa.REAL(), autoincrement=False, nullable=True, comment='the theta motor ontime value'),
                    sa.Column('cobra_motor_model_id_phi', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('motor_num_step_phi', sa.INTEGER(), autoincrement=False, nullable=True, comment='the number of steps the phi motor has undertaken'),
                    sa.Column('motor_on_time_phi', sa.REAL(), autoincrement=False, nullable=True, comment='the phi motor ontime value'),
                    sa.ForeignKeyConstraint(['cobra_motor_model_id_phi'], ['cobra_motor_model.cobra_motor_model_id'], name='cobra_movement_cobra_motor_model_id_phi_fkey'),
                    sa.ForeignKeyConstraint(['cobra_motor_model_id_theta'], ['cobra_motor_model.cobra_motor_model_id'], name='cobra_movement_cobra_motor_model_id_theta_fkey'),
                    sa.PrimaryKeyConstraint('mcs_frame_id', 'fiber_id', name='cobra_movement_pkey'),
                    postgresql_ignore_search_path=False
                    )
    op.create_index('ix_cobra_movement_mcs_frame_id', 'cobra_movement', ['mcs_frame_id'], unique=False)
    op.create_table('fiducial_fiber_position',
                    sa.Column('fiducial_fiber_id', sa.INTEGER(), autoincrement=False, nullable=False),
                    sa.Column('field_on_pfi', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('ff_in_field', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('ff_type', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
                    sa.Column('ff_id_in_type', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('ff_center_on_pfi_x_mm', sa.REAL(), autoincrement=False, nullable=True),
                    sa.Column('ff_center_on_pfi_y_mm', sa.REAL(), autoincrement=False, nullable=True),
                    sa.Column('version', sa.VARCHAR(), autoincrement=False, nullable=True),
                    sa.PrimaryKeyConstraint('fiducial_fiber_id', name='fiducial_fiber_position_pkey')
                    )
    op.create_table('cobra_status',
                    sa.Column('mcs_frame_id', sa.INTEGER(), autoincrement=False, nullable=False),
                    sa.Column('fiber_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Fiber identifier'),
                    sa.Column('spot_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Corresponding MCS image spot identifier '),
                    sa.Column('pfs_config_id', sa.BIGINT(), autoincrement=False, nullable=True),
                    sa.Column('iteration', sa.INTEGER(), autoincrement=False, nullable=True, comment='Iteration number for this frame'),
                    sa.Column('pfi_target_x_mm', sa.REAL(), autoincrement=False, nullable=True, comment='Target x-position on the PFI as determined from the  pfs_design_fiber table [mm]'),
                    sa.Column('pfi_target_y_mm', sa.REAL(), autoincrement=False, nullable=True, comment='Target y-position on the PFI as determined from the  pfs_design_fiber table [mm]'),
                    sa.Column('pfi_center_x_mm', sa.REAL(), autoincrement=False, nullable=True, comment='Actual x-position on the PFI [mm]'),
                    sa.Column('pfi_center_y_mm', sa.REAL(), autoincrement=False, nullable=True, comment='Actual y-position on the PFI [mm]'),
                    sa.ForeignKeyConstraint(['mcs_frame_id', 'fiber_id'], ['cobra_movement.mcs_frame_id', 'cobra_movement.fiber_id'], name='cobra_status_mcs_frame_id_fkey1'),
                    sa.ForeignKeyConstraint(['mcs_frame_id', 'spot_id'], ['mcs_data.mcs_frame_id', 'mcs_data.spot_id'], name='cobra_status_mcs_frame_id_fkey'),
                    sa.ForeignKeyConstraint(['pfs_config_id'], ['pfs_config.pfs_config_id'], name='cobra_status_pfs_config_id_fkey'),
                    sa.PrimaryKeyConstraint('mcs_frame_id', 'fiber_id', name='cobra_status_pkey')
                    )
    op.create_index('ix_cobra_status_mcs_frame_id', 'cobra_status', ['mcs_frame_id'], unique=True)
    op.create_table('spectrograph',
                    sa.Column('spectrograph_id', sa.INTEGER(), autoincrement=False, nullable=False),
                    sa.Column('spectrograph_module', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('arm', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
                    sa.Column('arm_num', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.PrimaryKeyConstraint('spectrograph_id', name='spectrograph_pkey')
                    )
    op.drop_table('cobra_match')
    op.drop_table('obslog_mcs_exposure_note')
    op.drop_table('mcs_pfi_transformation')
    op.drop_table('cobra_motor_map')
    op.drop_table('cobra_convergence_test')
    op.drop_table('cobra')
    op.drop_table('obslog_visit_set_note')
    op.drop_table('obslog_visit_note')
    op.drop_table('fiducial_fiber_geometry')
    op.drop_table('cobra_target')
    op.drop_table('sps_sequence')
    op.drop_table('sps_module')
    op.drop_table('obslog_user')
    op.drop_table('fiducial_fiber')
    op.drop_table('cobra_motor_direction')
    op.drop_table('cobra_motor_calib')
    # ### end Alembic commands ###
