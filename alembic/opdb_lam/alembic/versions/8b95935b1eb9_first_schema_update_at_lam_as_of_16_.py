"""first schema update at LAM as of 16 April 2021

Revision ID: 8b95935b1eb9
Revises: 
Create Date: 2021-04-16 10:54:24.781994

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.schema import Sequence, CreateSequence, DropSequence

# revision identifiers, used by Alembic.
revision = '8b95935b1eb9'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('obslog_user',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('account_name', sa.String(), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('account_name')
                    )
    op.create_table('cobra_target',
                    sa.Column('pfs_visit_id', sa.Integer(), autoincrement=False, nullable=False, comment='PFS visit identifier'),
                    sa.Column('iteration', sa.Integer(), autoincrement=False, nullable=False, comment='Iteration number for this frame'),
                    sa.Column('cobra_id', sa.Integer(), autoincrement=False, nullable=False, comment='Fiber identifier'),
                    sa.Column('pfs_config_id', sa.BigInteger(), nullable=True),
                    sa.Column('pfi_nominal_x_mm', sa.REAL(), nullable=True, comment='Nominal x-position on the PFI as determined from the  pfs_design_fiber table [mm]'),
                    sa.Column('pfi_nominal_y_mm', sa.REAL(), nullable=True, comment='Nominal y-position on the PFI as determined from the  pfs_design_fiber table [mm]'),
                    sa.Column('pfi_target_x_mm', sa.REAL(), nullable=True, comment='Target x-position on the PFI for each iteration'),
                    sa.Column('pfi_target_y_mm', sa.REAL(), nullable=True, comment='Target y-position on the PFI for each iteration'),
                    sa.Column('cobra_motor_model_id_theta', sa.Integer(), nullable=True),
                    sa.Column('motor_target_theta', sa.REAL(), nullable=True, comment='the target angle of the theta motor'),
                    sa.Column('motor_num_step_theta', sa.Integer(), nullable=True, comment='the number of steps the theta motor has undertaken'),
                    sa.Column('motor_on_time_theta', sa.REAL(), nullable=True, comment='the theta motor ontime value'),
                    sa.Column('cobra_motor_model_id_phi', sa.Integer(), nullable=True),
                    sa.Column('motor_target_phi', sa.REAL(), nullable=True, comment='the target angle of the phi motor'),
                    sa.Column('motor_num_step_phi', sa.Integer(), nullable=True, comment='the number of steps the phi motor has undertaken'),
                    sa.Column('motor_on_time_phi', sa.REAL(), nullable=True, comment='the phi motor ontime value'),
                    sa.Column('flags', sa.Integer(), nullable=True, comment='flags for movement etc.'),
                    sa.ForeignKeyConstraint(['pfs_visit_id'], ['pfs_visit.pfs_visit_id'], ),
                    sa.PrimaryKeyConstraint('pfs_visit_id', 'iteration', 'cobra_id'),
                    sa.UniqueConstraint('pfs_visit_id', 'iteration', 'cobra_id')
                    )
    op.create_table('obslog_visit_note',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('user_id', sa.Integer(), nullable=True),
                    sa.Column('pfs_visit_id', sa.Integer(), nullable=True),
                    sa.Column('body', sa.String(), nullable=False),
                    sa.ForeignKeyConstraint(['pfs_visit_id'], ['pfs_visit.pfs_visit_id'], ),
                    sa.ForeignKeyConstraint(['user_id'], ['obslog_user.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('obslog_visit_set_note',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('user_id', sa.Integer(), nullable=True),
                    sa.Column('visit_set_id', sa.Integer(), nullable=True),
                    sa.Column('body', sa.String(), nullable=False),
                    sa.ForeignKeyConstraint(['user_id'], ['obslog_user.id'], ),
                    sa.ForeignKeyConstraint(['visit_set_id'], ['sps_sequence.visit_set_id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('obslog_mcs_exposure_note',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('user_id', sa.Integer(), nullable=True),
                    sa.Column('mcs_exposure_frame_id', sa.Integer(), nullable=True),
                    sa.Column('body', sa.String(), nullable=False),
                    sa.ForeignKeyConstraint(['mcs_exposure_frame_id'], ['mcs_exposure.mcs_frame_id'], ),
                    sa.ForeignKeyConstraint(['user_id'], ['obslog_user.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('cobra_match',
                    sa.Column('mcs_frame_id', sa.Integer(), autoincrement=False, nullable=False),
                    sa.Column('spot_id', sa.Integer(), autoincrement=False, nullable=False, comment='Corresponding MCS image spot identifier '),
                    sa.Column('pfs_visit_id', sa.Integer(), autoincrement=False, nullable=True, comment='PFS visit identifier'),
                    sa.Column('iteration', sa.Integer(), autoincrement=False, nullable=True, comment='Iteration number for this frame'),
                    sa.Column('cobra_id', sa.Integer(), autoincrement=False, nullable=True, comment='Fiber identifier'),
                    sa.Column('pfi_center_x_mm', sa.REAL(), nullable=True, comment='Actual x-position on the PFI [mm]'),
                    sa.Column('pfi_center_y_mm', sa.REAL(), nullable=True, comment='Actual y-position on the PFI [mm]'),
                    sa.Column('flags', sa.Integer(), nullable=True, comment='flags for movement etc.'),
                    sa.ForeignKeyConstraint(['mcs_frame_id', 'spot_id'], ['mcs_data.mcs_frame_id', 'mcs_data.spot_id'], ),
                    sa.ForeignKeyConstraint(['pfs_visit_id', 'iteration', 'cobra_id'], ['cobra_target.pfs_visit_id', 'cobra_target.iteration', 'cobra_target.cobra_id'], ),
                    sa.PrimaryKeyConstraint('mcs_frame_id', 'spot_id'),
                    sa.UniqueConstraint('mcs_frame_id', 'spot_id')
                    )
    op.create_index(op.f('ix_cobra_match_mcs_frame_id'), 'cobra_match', ['mcs_frame_id'], unique=False)
    op.drop_index('ix_cobra_movement_mcs_frame_id', table_name='cobra_movement')
    op.drop_table('cobra_movement')
    op.drop_index('ix_cobra_status_mcs_frame_id', table_name='cobra_status')
    op.drop_table('cobra_status')
    op.create_unique_constraint(None, 'beam_switch_mode', ['beam_switch_mode_id'])
    op.create_unique_constraint(None, 'calib', ['calib_id'])
    op.create_unique_constraint(None, 'calib_set', ['calib_set_id'])
    op.create_unique_constraint(None, 'cloud_condition', ['cloud_condition_id'])
    op.create_unique_constraint(None, 'cobra', ['cobra_id'])
    op.create_unique_constraint(None, 'cobra_convergence_test', ['cobra_motor_model_id', 'iteration', 'cobra_motor_angle_target_id'])
    op.create_unique_constraint(None, 'cobra_geometry', ['cobra_motor_calib_id', 'cobra_id'])
    op.create_unique_constraint(None, 'cobra_motor_map', ['cobra_motor_model_id', 'cobra_motor_move_sequence'])
    op.create_unique_constraint(None, 'drp1d', ['pfs_object_id', 'processed_at'])
    op.create_unique_constraint(None, 'drp1d_redshift', ['pfs_object_id', 'processed_at'])
    op.create_unique_constraint(None, 'drp_ga', ['pfs_object_id', 'processed_at'])
    op.create_unique_constraint(None, 'flux_calib', ['flux_calib_id'])
    op.create_unique_constraint(None, 'guide_stars', ['guide_star_id'])
    op.create_unique_constraint(None, 'input_catalog', ['cat_id'])
    op.create_unique_constraint(None, 'line_list', ['line_id'])
    op.create_unique_constraint(None, 'mcs_boresight', ['pfs_visit_id'])
    op.create_unique_constraint(None, 'mcs_data', ['mcs_frame_id', 'spot_id'])
    op.create_unique_constraint(None, 'obj_type', ['obj_type_id'])
    op.drop_constraint('obs_fiber_pfs_visit_id_key', 'obs_fiber', type_='unique')
    op.create_unique_constraint(None, 'obs_fiber', ['pfs_visit_id', 'cobra_id'])
    op.create_unique_constraint(None, 'pfs_arm', ['pfs_visit_id'])
    op.create_unique_constraint(None, 'pfs_arm_obj', ['pfs_visit_id', 'cobra_id'])
    op.create_unique_constraint(None, 'pfs_config', ['pfs_config_id'])
    op.create_unique_constraint(None, 'pfs_config_fiber', ['pfs_config_id', 'cobra_id'])
    op.create_unique_constraint(None, 'pfs_design', ['pfs_design_id'])
    op.add_column('pfs_design_fiber', sa.Column('pfi_nominal_x_mm', sa.REAL(), nullable=True, comment='Nominal x-position on the PFI [mm]'))
    op.add_column('pfs_design_fiber', sa.Column('pfi_nominal_y_mm', sa.REAL(), nullable=True, comment='Nominal y-position on the PFI [mm]'))
    op.create_unique_constraint(None, 'pfs_design_fiber', ['pfs_design_id', 'cobra_id'])
    op.drop_column('pfs_design_fiber', 'pfi_target_y_mm')
    op.drop_column('pfs_design_fiber', 'pfi_target_x_mm')
    op.create_unique_constraint(None, 'pfs_object', ['pfs_object_id'])
    op.alter_column('pfs_visit', 'issued_at',
                    existing_type=postgresql.TIMESTAMP(),
                    comment='Issued time [YYYY-MM-DDThh:mm:ss]',
                    existing_nullable=True)
    op.create_unique_constraint(None, 'pfs_visit', ['pfs_visit_id'])
    op.create_unique_constraint(None, 'program', ['program_id'])
    op.create_unique_constraint(None, 'proposal', ['proposal_id'])
    op.create_unique_constraint(None, 'psf_model', ['psf_model_id'])
    op.create_unique_constraint(None, 'qa_type', ['qa_type_id'])
    op.create_unique_constraint(None, 'sky_model', ['sky_model_id'])

    conn = op.get_bind()
    res = conn.execute("SELECT pfs_visit_id, sps_camera_id FROM sps_annotation ORDER BY pfs_visit_id")
    results = res.fetchall()
    existing_sps_annotations = [{'pfs_visit_id': r[0], 'sps_camera_id': r[1]} for r in results]
    op.add_column('sps_annotation', sa.Column('annotation_id', sa.Integer(), autoincrement=True, nullable=True, comment='SpS annotation identifier (primary key)'))
    op.add_column('sps_annotation', sa.Column('created_at', sa.DateTime(), nullable=True, comment='Creation time [YYYY-MM-DDThh:mm:ss]'))
    op.drop_constraint('sps_annotation_pkey', 'sps_annotation', type_='primary')
    for i, existing_aps_annotation in enumerate(existing_sps_annotations):
        op.execute('UPDATE sps_annotation SET annotation_id = %d WHERE pfs_visit_id=%d and sps_camera_id = %d' % (i + 1, existing_aps_annotation['pfs_visit_id'], existing_aps_annotation['sps_camera_id']))
    op.execute(CreateSequence(Sequence('sps_annotation_annotation_id_seq', start=len(existing_sps_annotations) + 1)))
    op.create_primary_key('sps_annotation_pkey', 'sps_annotation', ['annotation_id'])
    op.create_unique_constraint('sps_annotation_annotation_id_key', 'sps_annotation', ['annotation_id'])
    op.alter_column("sps_annotation", "annotation_id",
                    nullable=False,
                    server_default=sa.text("nextval('sps_annotation_annotation_id_seq'::regclass)"))

    op.alter_column('sps_annotation', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    nullable=True,
                    comment='PFS visit identifier')
    op.alter_column('sps_annotation', 'sps_camera_id',
                    existing_type=sa.INTEGER(),
                    nullable=True,
                    comment='SpS camera identifier [1-16]')
    op.alter_column('sps_camera', 'arm',
                    existing_type=sa.VARCHAR(length=1),
                    comment='Spectrograph arm identifier [b, r, n, m]',
                    existing_comment='Spectrograph arm identifier [B, R, N, M]',
                    existing_nullable=True)
    op.alter_column('sps_camera', 'sps_camera_id',
                    existing_type=sa.INTEGER(),
                    comment='SpS camera identifier [1-16]',
                    existing_nullable=False,
                    autoincrement=False)
    op.alter_column('sps_camera', 'sps_module_id',
                    existing_type=sa.INTEGER(),
                    comment='SpS module identifier [1-4]',
                    existing_comment='SPS module identifier [1-4]',
                    existing_nullable=True)
    op.alter_column('sps_condition', 'background',
                    existing_type=sa.REAL(),
                    comment='Background level (TBD)',
                    existing_nullable=True)
    op.alter_column('sps_condition', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    comment='PFS visit identifier',
                    existing_nullable=False)
    op.alter_column('sps_condition', 'sps_camera_id',
                    existing_type=sa.INTEGER(),
                    comment='SpS camera identifier [1-16]',
                    existing_nullable=False)
    op.alter_column('sps_condition', 'throughput',
                    existing_type=sa.REAL(),
                    comment='System throughput (TBD)',
                    existing_nullable=True)
    op.create_unique_constraint(None, 'sps_condition', ['pfs_visit_id', 'sps_camera_id'])
    op.alter_column('sps_exposure', 'beam_config_date',
                    existing_type=postgresql.DOUBLE_PRECISION(precision=53),
                    comment='MJD when the configuration changed',
                    existing_nullable=True)
    op.alter_column('sps_exposure', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    comment='PFS visit identifier',
                    existing_nullable=False)
    op.alter_column('sps_exposure', 'sps_camera_id',
                    existing_type=sa.INTEGER(),
                    comment='SpS camera identifier [1-16]',
                    existing_nullable=False)
    op.create_unique_constraint(None, 'sps_exposure', ['pfs_visit_id', 'sps_camera_id'])
    op.alter_column('sps_module', 'description',
                    existing_type=sa.VARCHAR(),
                    comment='SpS module name',
                    existing_nullable=True)
    op.alter_column('sps_module', 'sps_module_id',
                    existing_type=sa.INTEGER(),
                    comment='SpS module identifier [1-4]',
                    existing_nullable=False,
                    autoincrement=False)
    op.create_unique_constraint(None, 'sps_module', ['sps_module_id'])
    op.alter_column('sps_sequence', 'visit_set_id',
                    existing_type=sa.INTEGER(),
                    comment='SpS visit set identifier',
                    existing_nullable=False,
                    autoincrement=False)
    op.create_unique_constraint(None, 'sps_sequence', ['visit_set_id'])
    op.alter_column('sps_visit', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    comment='PFS visit identifier',
                    existing_nullable=False,
                    autoincrement=False)
    op.create_unique_constraint(None, 'sps_visit', ['pfs_visit_id'])
    op.create_unique_constraint(None, 'star_type', ['star_type_id'])
    op.create_unique_constraint(None, 'target', ['target_id'])
    op.create_unique_constraint(None, 'target_type', ['target_type_id'])
    op.create_unique_constraint(None, 'tel_condition', ['tel_visit_id'])
    op.create_unique_constraint(None, 'tile', ['tile_id'])
    op.create_unique_constraint(None, 'visit_hash', ['pfs_visit_hash'])
    op.create_unique_constraint(None, 'visit_set', ['pfs_visit_id'])
    op.add_column('visits_to_combine', sa.Column('pfs_visit_id', sa.Integer(), autoincrement=False, nullable=False))
    op.create_unique_constraint(None, 'visits_to_combine', ['pfs_visit_id', 'pfs_visit_hash'])
    op.drop_constraint('visits_to_combine_tel_visit_id_fkey', 'visits_to_combine', type_='foreignkey')
    op.create_foreign_key(None, 'visits_to_combine', 'pfs_visit', ['pfs_visit_id'], ['pfs_visit_id'])
    op.drop_column('visits_to_combine', 'tel_visit_id')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('visits_to_combine', sa.Column('tel_visit_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'visits_to_combine', type_='foreignkey')
    op.create_foreign_key('visits_to_combine_tel_visit_id_fkey', 'visits_to_combine', 'tel_visit', ['tel_visit_id'], ['tel_visit_id'])
    op.drop_constraint(None, 'visits_to_combine', type_='unique')
    op.drop_column('visits_to_combine', 'pfs_visit_id')
    op.drop_constraint(None, 'visit_set', type_='unique')
    op.drop_constraint(None, 'visit_hash', type_='unique')
    op.drop_constraint(None, 'tile', type_='unique')
    op.drop_constraint(None, 'tel_condition', type_='unique')
    op.drop_constraint(None, 'target_type', type_='unique')
    op.drop_constraint(None, 'target', type_='unique')
    op.drop_constraint(None, 'star_type', type_='unique')
    op.drop_constraint(None, 'sps_visit', type_='unique')
    op.alter_column('sps_visit', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    comment=None,
                    existing_comment='PFS visit identifier',
                    existing_nullable=False,
                    autoincrement=False)
    op.drop_constraint(None, 'sps_sequence', type_='unique')
    op.alter_column('sps_sequence', 'visit_set_id',
                    existing_type=sa.INTEGER(),
                    comment=None,
                    existing_comment='SpS visit set identifier',
                    existing_nullable=False,
                    autoincrement=False)
    op.drop_constraint(None, 'sps_module', type_='unique')
    op.alter_column('sps_module', 'sps_module_id',
                    existing_type=sa.INTEGER(),
                    comment=None,
                    existing_comment='SpS module identifier [1-4]',
                    existing_nullable=False,
                    autoincrement=False)
    op.alter_column('sps_module', 'description',
                    existing_type=sa.VARCHAR(),
                    comment=None,
                    existing_comment='SpS module name',
                    existing_nullable=True)
    op.drop_constraint(None, 'sps_exposure', type_='unique')
    op.alter_column('sps_exposure', 'sps_camera_id',
                    existing_type=sa.INTEGER(),
                    comment=None,
                    existing_comment='SpS camera identifier [1-16]',
                    existing_nullable=False)
    op.alter_column('sps_exposure', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    comment=None,
                    existing_comment='PFS visit identifier',
                    existing_nullable=False)
    op.alter_column('sps_exposure', 'beam_config_date',
                    existing_type=postgresql.DOUBLE_PRECISION(precision=53),
                    comment=None,
                    existing_comment='MJD when the configuration changed',
                    existing_nullable=True)
    op.drop_constraint(None, 'sps_condition', type_='unique')
    op.alter_column('sps_condition', 'throughput',
                    existing_type=sa.REAL(),
                    comment=None,
                    existing_comment='System throughput (TBD)',
                    existing_nullable=True)
    op.alter_column('sps_condition', 'sps_camera_id',
                    existing_type=sa.INTEGER(),
                    comment=None,
                    existing_comment='SpS camera identifier [1-16]',
                    existing_nullable=False)
    op.alter_column('sps_condition', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    comment=None,
                    existing_comment='PFS visit identifier',
                    existing_nullable=False)
    op.alter_column('sps_condition', 'background',
                    existing_type=sa.REAL(),
                    comment=None,
                    existing_comment='Background level (TBD)',
                    existing_nullable=True)
    op.alter_column('sps_camera', 'sps_module_id',
                    existing_type=sa.INTEGER(),
                    comment='SPS module identifier [1-4]',
                    existing_comment='SpS module identifier [1-4]',
                    existing_nullable=True)
    op.alter_column('sps_camera', 'sps_camera_id',
                    existing_type=sa.INTEGER(),
                    comment=None,
                    existing_comment='SpS camera identifier [1-16]',
                    existing_nullable=False,
                    autoincrement=False)
    op.alter_column('sps_camera', 'arm',
                    existing_type=sa.VARCHAR(length=1),
                    comment='Spectrograph arm identifier [B, R, N, M]',
                    existing_comment='Spectrograph arm identifier [b, r, n, m]',
                    existing_nullable=True)
    op.alter_column('sps_annotation', 'sps_camera_id',
                    existing_type=sa.INTEGER(),
                    nullable=False,
                    comment=None,
                    existing_comment='SpS camera identifier [1-16]')
    op.alter_column('sps_annotation', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    nullable=False,
                    comment=None,
                    existing_comment='PFS visit identifier')
    op.drop_column('sps_annotation', 'created_at')
    op.drop_column('sps_annotation', 'annotation_id')
    op.drop_constraint(None, 'sky_model', type_='unique')
    op.drop_constraint(None, 'qa_type', type_='unique')
    op.drop_constraint(None, 'psf_model', type_='unique')
    op.drop_constraint(None, 'proposal', type_='unique')
    op.drop_constraint(None, 'program', type_='unique')
    op.drop_constraint(None, 'pfs_visit', type_='unique')
    op.alter_column('pfs_visit', 'issued_at',
                    existing_type=postgresql.TIMESTAMP(),
                    comment=None,
                    existing_comment='Issued time [YYYY-MM-DDThh:mm:ss]',
                    existing_nullable=True)
    op.drop_constraint(None, 'pfs_object', type_='unique')
    op.add_column('pfs_design_fiber', sa.Column('pfi_target_x_mm', sa.REAL(), autoincrement=False, nullable=True, comment='Target x-position on the PFI [mm]'))
    op.add_column('pfs_design_fiber', sa.Column('pfi_target_y_mm', sa.REAL(), autoincrement=False, nullable=True, comment='Target y-position on the PFI [mm]'))
    op.drop_constraint(None, 'pfs_design_fiber', type_='unique')
    op.drop_column('pfs_design_fiber', 'pfi_nominal_y_mm')
    op.drop_column('pfs_design_fiber', 'pfi_nominal_x_mm')
    op.drop_constraint(None, 'pfs_design', type_='unique')
    op.drop_constraint(None, 'pfs_config_fiber', type_='unique')
    op.drop_constraint(None, 'pfs_config', type_='unique')
    op.drop_constraint(None, 'pfs_arm_obj', type_='unique')
    op.drop_constraint(None, 'pfs_arm', type_='unique')
    op.drop_constraint(None, 'obs_fiber', type_='unique')
    op.create_unique_constraint('obs_fiber_pfs_visit_id_key', 'obs_fiber', ['pfs_visit_id'])
    op.drop_constraint(None, 'obj_type', type_='unique')
    op.drop_constraint(None, 'mcs_data', type_='unique')
    op.drop_constraint(None, 'mcs_boresight', type_='unique')
    op.drop_constraint(None, 'line_list', type_='unique')
    op.drop_constraint(None, 'input_catalog', type_='unique')
    op.drop_constraint(None, 'guide_stars', type_='unique')
    op.drop_constraint(None, 'flux_calib', type_='unique')
    op.drop_constraint(None, 'drp_ga', type_='unique')
    op.drop_constraint(None, 'drp1d_redshift', type_='unique')
    op.drop_constraint(None, 'drp1d', type_='unique')
    op.drop_constraint(None, 'cobra_motor_map', type_='unique')
    op.drop_constraint(None, 'cobra_geometry', type_='unique')
    op.drop_constraint(None, 'cobra_convergence_test', type_='unique')
    op.drop_constraint(None, 'cobra', type_='unique')
    op.drop_constraint(None, 'cloud_condition', type_='unique')
    op.drop_constraint(None, 'calib_set', type_='unique')
    op.drop_constraint(None, 'calib', type_='unique')
    op.drop_constraint(None, 'beam_switch_mode', type_='unique')
    op.create_table('cobra_status',
                    sa.Column('mcs_frame_id', sa.INTEGER(), autoincrement=False, nullable=False),
                    sa.Column('cobra_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Fiber identifier'),
                    sa.Column('spot_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Corresponding MCS image spot identifier '),
                    sa.Column('pfs_config_id', sa.BIGINT(), autoincrement=False, nullable=True),
                    sa.Column('iteration', sa.INTEGER(), autoincrement=False, nullable=True, comment='Iteration number for this frame'),
                    sa.Column('pfi_target_x_mm', sa.REAL(), autoincrement=False, nullable=True, comment='Target x-position on the PFI as determined from the  pfs_design_fiber table [mm]'),
                    sa.Column('pfi_target_y_mm', sa.REAL(), autoincrement=False, nullable=True, comment='Target y-position on the PFI as determined from the  pfs_design_fiber table [mm]'),
                    sa.Column('pfi_center_x_mm', sa.REAL(), autoincrement=False, nullable=True, comment='Actual x-position on the PFI [mm]'),
                    sa.Column('pfi_center_y_mm', sa.REAL(), autoincrement=False, nullable=True, comment='Actual y-position on the PFI [mm]'),
                    sa.ForeignKeyConstraint(['mcs_frame_id', 'spot_id'], ['mcs_data.mcs_frame_id', 'mcs_data.spot_id'], name='cobra_status_mcs_frame_id_fkey'),
                    sa.PrimaryKeyConstraint('mcs_frame_id', 'cobra_id', name='cobra_status_pkey'),
                    postgresql_ignore_search_path=False
                    )
    op.create_index('ix_cobra_status_mcs_frame_id', 'cobra_status', ['mcs_frame_id'], unique=False)
    op.create_table('cobra_movement',
                    sa.Column('mcs_frame_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='MCS frame identifier. Provided by Gen2'),
                    sa.Column('cobra_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Fiber identifier'),
                    sa.Column('cobra_motor_calib_id', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('motor_num_step_theta', sa.INTEGER(), autoincrement=False, nullable=True, comment='the number of steps the theta motor has undertaken'),
                    sa.Column('motor_on_time_theta', sa.REAL(), autoincrement=False, nullable=True, comment='the theta motor ontime value'),
                    sa.Column('motor_num_step_phi', sa.INTEGER(), autoincrement=False, nullable=True, comment='the number of steps the phi motor has undertaken'),
                    sa.Column('motor_on_time_phi', sa.REAL(), autoincrement=False, nullable=True, comment='the phi motor ontime value'),
                    sa.ForeignKeyConstraint(['cobra_motor_calib_id'], ['cobra_motor_calib.cobra_motor_calib_id'], name='cobra_movement_cobra_motor_calib_id_fkey'),
                    sa.ForeignKeyConstraint(['mcs_frame_id', 'cobra_id'], ['cobra_status.mcs_frame_id', 'cobra_status.cobra_id'], name='cobra_movement_mcs_frame_id_fkey'),
                    sa.PrimaryKeyConstraint('mcs_frame_id', 'cobra_id', name='cobra_movement_pkey')
                    )
    op.create_index('ix_cobra_movement_mcs_frame_id', 'cobra_movement', ['mcs_frame_id'], unique=False)
    op.drop_index(op.f('ix_cobra_match_mcs_frame_id'), table_name='cobra_match')
    op.drop_table('cobra_match')
    op.drop_table('obslog_mcs_exposure_note')
    op.drop_table('obslog_visit_set_note')
    op.drop_table('obslog_visit_note')
    op.drop_table('cobra_target')
    op.drop_table('obslog_user')
    # ### end Alembic commands ###
