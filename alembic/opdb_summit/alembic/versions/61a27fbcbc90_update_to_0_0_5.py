"""update to 0.0.5

Revision ID: 61a27fbcbc90
Revises: 308ade0f3929
Create Date: 2021-03-18 11:07:55.368287

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.schema import Sequence, CreateSequence, DropSequence


# revision identifiers, used by Alembic.
revision = '61a27fbcbc90'
down_revision = '308ade0f3929'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_table('test')
    op.add_column('sps_annotation', sa.Column('annotation_id', sa.Integer(), autoincrement=False, nullable=True, comment='SpS annotation identifier (primary key)'))
    op.add_column('sps_annotation', sa.Column('created_at', sa.DateTime(), nullable=True, comment='Creation time [YYYY-MM-DDThh:mm:ss]'))
    op.drop_constraint('sps_annotation_pkey', 'sps_annotation', type_='primary')
    op.drop_constraint('sps_annotation_pfs_visit_id_sps_camera_id_key', 'sps_annotation', type_='unique')
    op.execute('UPDATE sps_annotation SET annotation_id = 1 WHERE pfs_visit_id=17687 and sps_camera_id = 1')
    op.execute('UPDATE sps_annotation SET annotation_id = 2 WHERE pfs_visit_id=17687 and sps_camera_id = 2')
    op.execute('UPDATE sps_annotation SET annotation_id = 3 WHERE pfs_visit_id=17741 and sps_camera_id = 1')
    op.execute('UPDATE sps_annotation SET annotation_id = 4 WHERE pfs_visit_id=17741 and sps_camera_id = 2')
    op.execute('UPDATE sps_annotation SET annotation_id = 5 WHERE pfs_visit_id=19572 and sps_camera_id = 1')
    op.execute(CreateSequence(Sequence('sps_annotation_annotation_id_seq', start=6)))
    op.create_primary_key('sps_annotation_pkey', 'sps_annotation', ['annotation_id'])
    op.create_unique_constraint('sps_annotation_annotation_id_key', 'sps_annotation', ['annotation_id'])
    op.alter_column("sps_annotation", "annotation_id",
                    nullable=False,
                    server_default=sa.text("nextval('sps_annotation_annotation_id_seq'::regclass)"))
    op.alter_column('sps_annotation', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    nullable=True,
                    comment='PFS visit identifier')
    op.alter_column('sps_annotation', 'sps_camera_id',
                    existing_type=sa.INTEGER(),
                    nullable=True,
                    comment='SpS camera identifier [1-16]')
    op.alter_column('sps_camera', 'arm',
                    existing_type=sa.VARCHAR(length=1),
                    comment='Spectrograph arm identifier [b, r, n, m]',
                    existing_comment='Spectrograph arm identifier [B, R, N, M]',
                    existing_nullable=True)
    op.alter_column('sps_camera', 'sps_camera_id',
                    existing_type=sa.INTEGER(),
                    comment='SpS camera identifier [1-16]',
                    autoincrement=False)
    op.alter_column('sps_camera', 'sps_module_id',
                    existing_type=sa.INTEGER(),
                    comment='SpS module identifier [1-4]',
                    existing_comment='SPS module identifier [1-4]',
                    existing_nullable=True)
    op.alter_column('sps_condition', 'background',
                    existing_type=sa.REAL(),
                    comment='Background level (TBD)',
                    existing_nullable=True)
    op.alter_column('sps_condition', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    comment='PFS visit identifier')
    op.alter_column('sps_condition', 'sps_camera_id',
                    existing_type=sa.INTEGER(),
                    comment='SpS camera identifier [1-16]')
    op.alter_column('sps_condition', 'throughput',
                    existing_type=sa.REAL(),
                    comment='System throughput (TBD)',
                    existing_nullable=True)
    op.alter_column('sps_exposure', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    comment='PFS visit identifier')
    op.alter_column('sps_exposure', 'sps_camera_id',
                    existing_type=sa.INTEGER(),
                    comment='SpS camera identifier [1-16]')
    op.alter_column('sps_module', 'description',
                    existing_type=sa.VARCHAR(),
                    comment='SpS module name',
                    existing_nullable=True)
    op.alter_column('sps_module', 'sps_module_id',
                    existing_type=sa.INTEGER(),
                    comment='SpS module identifier [1-4]',
                    autoincrement=False)
    op.alter_column('sps_sequence', 'visit_set_id',
                    existing_type=sa.INTEGER(),
                    comment='SpS visit set identifier',
                    autoincrement=False)
    op.alter_column('sps_visit', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    comment='PFS visit identifier',
                    autoincrement=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('sps_visit', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    comment=None,
                    existing_comment='PFS visit identifier',
                    autoincrement=False)
    op.alter_column('sps_sequence', 'visit_set_id',
                    existing_type=sa.INTEGER(),
                    comment=None,
                    existing_comment='SpS visit set identifier',
                    autoincrement=False)
    op.alter_column('sps_module', 'sps_module_id',
                    existing_type=sa.INTEGER(),
                    comment=None,
                    existing_comment='SpS module identifier [1-4]',
                    autoincrement=False)
    op.alter_column('sps_module', 'description',
                    existing_type=sa.VARCHAR(),
                    comment=None,
                    existing_comment='SpS module name',
                    existing_nullable=True)
    op.alter_column('sps_exposure', 'sps_camera_id',
                    existing_type=sa.INTEGER(),
                    comment=None,
                    existing_comment='SpS camera identifier [1-16]')
    op.alter_column('sps_exposure', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    comment=None,
                    existing_comment='PFS visit identifier')
    op.alter_column('sps_condition', 'throughput',
                    existing_type=sa.REAL(),
                    comment=None,
                    existing_comment='System throughput (TBD)',
                    existing_nullable=True)
    op.alter_column('sps_condition', 'sps_camera_id',
                    existing_type=sa.INTEGER(),
                    comment=None,
                    existing_comment='SpS camera identifier [1-16]')
    op.alter_column('sps_condition', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    comment=None,
                    existing_comment='PFS visit identifier')
    op.alter_column('sps_condition', 'background',
                    existing_type=sa.REAL(),
                    comment=None,
                    existing_comment='Background level (TBD)',
                    existing_nullable=True)
    op.alter_column('sps_camera', 'sps_module_id',
                    existing_type=sa.INTEGER(),
                    comment='SPS module identifier [1-4]',
                    existing_comment='SpS module identifier [1-4]',
                    existing_nullable=True)
    op.alter_column('sps_camera', 'sps_camera_id',
                    existing_type=sa.INTEGER(),
                    comment=None,
                    existing_comment='SpS camera identifier [1-16]',
                    autoincrement=False)
    op.alter_column('sps_camera', 'arm',
                    existing_type=sa.VARCHAR(length=1),
                    comment='Spectrograph arm identifier [B, R, N, M]',
                    existing_comment='Spectrograph arm identifier [b, r, n, m]',
                    existing_nullable=True)
    op.create_unique_constraint('sps_annotation_pfs_visit_id_sps_camera_id_key', 'sps_annotation', ['pfs_visit_id', 'sps_camera_id'])
    op.alter_column('sps_annotation', 'sps_camera_id',
                    existing_type=sa.INTEGER(),
                    nullable=False,
                    comment=None,
                    existing_comment='SpS camera identifier [1-16]')
    op.alter_column('sps_annotation', 'pfs_visit_id',
                    existing_type=sa.INTEGER(),
                    nullable=False,
                    comment=None,
                    existing_comment='PFS visit identifier')
    op.drop_column('sps_annotation', 'created_at')
    op.drop_column('sps_annotation', 'annotation_id')
    # op.create_table('test',
    #                sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    #                sa.Column('value', sa.REAL(), autoincrement=False, nullable=True)
    #                )
    # ### end Alembic commands ###
