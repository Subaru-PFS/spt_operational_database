"""test 1

Revision ID: d09bde8d956b
Revises: 
Create Date: 2020-10-12 11:38:30.767830

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'd09bde8d956b'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint(None, 'beam_switch_mode', ['beam_switch_mode_id'])
    op.create_unique_constraint(None, 'calib', ['calib_id'])
    op.create_unique_constraint(None, 'calib_set', ['calib_set_id'])
    op.create_unique_constraint(None, 'cloud_condition', ['cloud_condition_id'])
    op.create_unique_constraint(None, 'cobra', ['cobra_id'])
    op.create_unique_constraint(None, 'cobra_convergence_test', ['cobra_motor_model_id', 'iteration', 'cobra_motor_angle_target_id'])
    op.create_unique_constraint(None, 'cobra_geometry', ['cobra_motor_calib_id', 'cobra_id'])
    op.create_unique_constraint(None, 'cobra_motor_map', ['cobra_motor_model_id', 'cobra_motor_move_sequence'])
    op.create_unique_constraint(None, 'cobra_movement', ['mcs_frame_id', 'cobra_id'])
    op.create_unique_constraint(None, 'cobra_status', ['mcs_frame_id', 'cobra_id'])
    op.create_unique_constraint(None, 'drp1d', ['pfs_object_id', 'processed_at'])
    op.create_unique_constraint(None, 'drp1d_redshift', ['pfs_object_id', 'processed_at'])
    op.create_unique_constraint(None, 'drp_ga', ['pfs_object_id', 'processed_at'])
    op.create_unique_constraint(None, 'flux_calib', ['flux_calib_id'])
    op.create_unique_constraint(None, 'guide_stars', ['guide_star_id'])
    op.create_unique_constraint(None, 'input_catalog', ['cat_id'])
    op.create_unique_constraint(None, 'line_list', ['line_id'])
    op.create_unique_constraint(None, 'mcs_boresight', ['pfs_visit_id'])
    op.create_unique_constraint(None, 'mcs_data', ['mcs_frame_id', 'spot_id'])
    op.create_unique_constraint(None, 'obj_type', ['obj_type_id'])
    op.drop_constraint('obs_fiber_pfs_visit_id_key', 'obs_fiber', type_='unique')
    op.create_unique_constraint(None, 'obs_fiber', ['pfs_visit_id', 'cobra_id'])
    op.create_unique_constraint(None, 'pfs_arm', ['pfs_visit_id'])
    op.create_unique_constraint(None, 'pfs_arm_obj', ['pfs_visit_id', 'cobra_id'])
    op.create_unique_constraint(None, 'pfs_config', ['pfs_config_id'])
    op.create_unique_constraint(None, 'pfs_config_fiber', ['pfs_config_id', 'cobra_id'])
    op.create_unique_constraint(None, 'pfs_design', ['pfs_design_id'])
    op.create_unique_constraint(None, 'pfs_design_fiber', ['pfs_design_id', 'cobra_id'])
    op.create_unique_constraint(None, 'pfs_object', ['pfs_object_id'])
    op.create_unique_constraint(None, 'pfs_visit', ['pfs_visit_id'])
    op.create_unique_constraint(None, 'program', ['program_id'])
    op.create_unique_constraint(None, 'proposal', ['proposal_id'])
    op.create_unique_constraint(None, 'psf_model', ['psf_model_id'])
    op.create_unique_constraint(None, 'qa_type', ['qa_type_id'])
    op.create_unique_constraint(None, 'sky_model', ['sky_model_id'])
    op.create_unique_constraint(None, 'sps_annotation', ['pfs_visit_id', 'sps_camera_id'])
    op.create_unique_constraint(None, 'sps_condition', ['pfs_visit_id', 'sps_camera_id'])
    op.alter_column('sps_exposure', 'beam_config_date',
               existing_type=postgresql.DOUBLE_PRECISION(precision=53),
               comment='MJD when the configuration changed',
               existing_nullable=True)
    op.create_unique_constraint(None, 'sps_exposure', ['pfs_visit_id', 'sps_camera_id'])
    op.create_unique_constraint(None, 'sps_module', ['sps_module_id'])
    op.create_unique_constraint(None, 'sps_sequence', ['visit_set_id'])
    op.create_unique_constraint(None, 'sps_visit', ['pfs_visit_id'])
    op.create_unique_constraint(None, 'star_type', ['star_type_id'])
    op.create_unique_constraint(None, 'target', ['target_id'])
    op.create_unique_constraint(None, 'target_type', ['target_type_id'])
    op.create_unique_constraint(None, 'tel_condition', ['tel_visit_id'])
    op.create_unique_constraint(None, 'tile', ['tile_id'])
    op.create_unique_constraint(None, 'visit_hash', ['pfs_visit_hash'])
    op.create_unique_constraint(None, 'visit_set', ['pfs_visit_id'])
    op.add_column('visits_to_combine', sa.Column('pfs_visit_id', sa.Integer(), autoincrement=False, nullable=False))
    op.create_unique_constraint(None, 'visits_to_combine', ['pfs_visit_id', 'pfs_visit_hash'])
    op.drop_constraint('visits_to_combine_tel_visit_id_fkey', 'visits_to_combine', type_='foreignkey')
    op.create_foreign_key(None, 'visits_to_combine', 'pfs_visit', ['pfs_visit_id'], ['pfs_visit_id'])
    op.drop_column('visits_to_combine', 'tel_visit_id')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('visits_to_combine', sa.Column('tel_visit_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'visits_to_combine', type_='foreignkey')
    op.create_foreign_key('visits_to_combine_tel_visit_id_fkey', 'visits_to_combine', 'tel_visit', ['tel_visit_id'], ['tel_visit_id'])
    op.drop_constraint(None, 'visits_to_combine', type_='unique')
    op.drop_column('visits_to_combine', 'pfs_visit_id')
    op.drop_constraint(None, 'visit_set', type_='unique')
    op.drop_constraint(None, 'visit_hash', type_='unique')
    op.drop_constraint(None, 'tile', type_='unique')
    op.drop_constraint(None, 'tel_condition', type_='unique')
    op.drop_constraint(None, 'target_type', type_='unique')
    op.drop_constraint(None, 'target', type_='unique')
    op.drop_constraint(None, 'star_type', type_='unique')
    op.drop_constraint(None, 'sps_visit', type_='unique')
    op.drop_constraint(None, 'sps_sequence', type_='unique')
    op.drop_constraint(None, 'sps_module', type_='unique')
    op.drop_constraint(None, 'sps_exposure', type_='unique')
    op.alter_column('sps_exposure', 'beam_config_date',
               existing_type=postgresql.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment='MJD when the configuration changed',
               existing_nullable=True)
    op.drop_constraint(None, 'sps_condition', type_='unique')
    op.drop_constraint(None, 'sps_annotation', type_='unique')
    op.drop_constraint(None, 'sky_model', type_='unique')
    op.drop_constraint(None, 'qa_type', type_='unique')
    op.drop_constraint(None, 'psf_model', type_='unique')
    op.drop_constraint(None, 'proposal', type_='unique')
    op.drop_constraint(None, 'program', type_='unique')
    op.drop_constraint(None, 'pfs_visit', type_='unique')
    op.drop_constraint(None, 'pfs_object', type_='unique')
    op.drop_constraint(None, 'pfs_design_fiber', type_='unique')
    op.drop_constraint(None, 'pfs_design', type_='unique')
    op.drop_constraint(None, 'pfs_config_fiber', type_='unique')
    op.drop_constraint(None, 'pfs_config', type_='unique')
    op.drop_constraint(None, 'pfs_arm_obj', type_='unique')
    op.drop_constraint(None, 'pfs_arm', type_='unique')
    op.drop_constraint(None, 'obs_fiber', type_='unique')
    op.create_unique_constraint('obs_fiber_pfs_visit_id_key', 'obs_fiber', ['pfs_visit_id'])
    op.drop_constraint(None, 'obj_type', type_='unique')
    op.drop_constraint(None, 'mcs_data', type_='unique')
    op.drop_constraint(None, 'mcs_boresight', type_='unique')
    op.drop_constraint(None, 'line_list', type_='unique')
    op.drop_constraint(None, 'input_catalog', type_='unique')
    op.drop_constraint(None, 'guide_stars', type_='unique')
    op.drop_constraint(None, 'flux_calib', type_='unique')
    op.drop_constraint(None, 'drp_ga', type_='unique')
    op.drop_constraint(None, 'drp1d_redshift', type_='unique')
    op.drop_constraint(None, 'drp1d', type_='unique')
    op.drop_constraint(None, 'cobra_status', type_='unique')
    op.drop_constraint(None, 'cobra_movement', type_='unique')
    op.drop_constraint(None, 'cobra_motor_map', type_='unique')
    op.drop_constraint(None, 'cobra_geometry', type_='unique')
    op.drop_constraint(None, 'cobra_convergence_test', type_='unique')
    op.drop_constraint(None, 'cobra', type_='unique')
    op.drop_constraint(None, 'cloud_condition', type_='unique')
    op.drop_constraint(None, 'calib_set', type_='unique')
    op.drop_constraint(None, 'calib', type_='unique')
    op.drop_constraint(None, 'beam_switch_mode', type_='unique')
    # ### end Alembic commands ###
